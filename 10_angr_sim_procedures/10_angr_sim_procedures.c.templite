${
import random, os
random.seed(os.urandom(16))
userdef_charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
userdef = [''.join(random.choice(userdef_charset) for _ in range(8)) for _ in range(4)]
def generate_true_statement(variable, value):
  random_int = random.randint(0, 0xFFFFFFFF)
  value_xor_int = value ^ random_int
  return '(!(' + variable + ' ^ ' + str(random_int) + ' ^ ' + str(value_xor_int) + '))'

def recursive_if_else(variable, value, end_statement, depth):
  if depth == 0:
    write(end_statement)
  else:
    if_true = random.choice([True, False])
    if (if_true):
      write('if (' + generate_true_statement(variable, value) + ') {')
      recursive_if_else(variable, value, end_statement, depth - 1)
      write('} else {')
      recursive_if_else(variable, value, end_statement, depth - 1)
      write('}')
    else:
      write('if (!' + generate_true_statement(variable, value) + ') {')
      recursive_if_else(variable, value, end_statement, depth - 1)
      write('} else {')
      recursive_if_else(variable, value, end_statement, depth - 1)
      write('}')
}$

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <sys/ptrace.h>

#define USERDEF0 "${ userdef[0] }$"
#define USERDEF1 "${ userdef[1] }$"
#define USERDEF2 "${ userdef[2] }$"
#define USERDEF3 "${ userdef[3] }$"
#define LEN_USERDEF 8

char msg[] = "${ description }$";

char padding0[${ write(random.randint(0, 2**16)) }$];
char buffer1[5];
char padding1[${ write(random.randint(0, 2**16)) }$];
char buffer0[5];
char padding2[${ write(random.randint(0, 2**16)) }$];

void print_msg() {
  printf("%s", msg);
}

int complex_function(int value, int i) {
  return (((value - 33 + 7*i) % 94) + 33);
}

int main(int argc, char* argv[]) {
  char password[20*4];
  int keep_going = 1;
  unsigned int x = 0xDEADBEEF;

  print_msg();

  memset(password, 0, 20*4);
  strncpy(&password[0], USERDEF0, LEN_USERDEF);
  strncpy(&password[20], USERDEF1, LEN_USERDEF);
  strncpy(&password[40], USERDEF2, LEN_USERDEF);
  strncpy(&password[60], USERDEF3, LEN_USERDEF);

  /* complex function on password */
  for (int i=0; i<4; ++i) {
    for (int j=0; j<8; ++j) {
      password[20*i + j] = complex_function(password[20*i + j], 8*i + j);
    }
  }

  printf("Enter the password: ");

  ${
  statement = """for (int i=0; i<4; ++i) {
    scanf("%u %u%*[ ]", (uint32_t*) buffer0, (uint32_t*) buffer1);
    keep_going = keep_going && !strncmp(buffer0, &password[20*i], 4) && !strncmp(buffer1, &password[20*i+4], 4);
  }"""
  }$

  ${ recursive_if_else('x', 0xDEADBEEF, statement, 8) }$

  if (!keep_going) {
    printf("Try again.\n");
  } else {
    printf("Good Job.\n");
  }
}
