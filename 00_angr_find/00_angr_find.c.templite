${
import random, os
random.seed(os.urandom(8))
userdef_charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
userdef = ''.join(random.choice(userdef_charset) for _ in range(8))
}$

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ptrace.h>

#define USERDEF "${ userdef }$"
#define LEN_USERDEF ${ write(len(userdef)) }$

char msg[] =
  "${ description }$";

void print_msg() {
  printf("%s", msg);
}

int complex_function(int value, int i) {
#define LAMBDA 31

  // base64 = [48, 57] union [65, 90] union [97, 122]
  if (48 <= value && value <= 57) {
    value = value - 48;
  } else if (65 <= value && value <= 90) {
    value = (58-48) + value - 65;
  } else if (97 <= value && value <= 122) {
    value = (58-48) + (91-65) + value - 97;
  } else {
    printf("Try again.\n");
    exit(1);
  }

  value = (value + LAMBDA * i) % ((58-48) + (91-65) + (123 - 97))

  if (0 <= value && value < (58-48)) {
    value = value + 48;
  } else if ((58-48) <= value && value < (58-48) + (91-65)) {
    value = value - (58-48) + 65;
  } else if ((58-48) + (91-65) <= value && value < (58-48) + (91-65) + (123 - 97)) {
    value = value - (58-48) - (91-65) + 97;
  } else {
    printf("There was an error with complex_function. Contact the author to report this bug.");
    exit(1);
  }

  return value;
}

int main(int argc, char* argv[]) {
  char buffer[20];
  char password[20];

  print_msg();

  for (int i=0; i < 20; ++i) {
    password[i] = 0;
  }

  strncpy(password, USERDEF, LEN_USERDEF);

  password[0] ^= password[1];
  password[1] ^= password[0];
  password[0] ^= password[1];

  printf("Enter the password: ");
  scanf("%8s", buffer);

  for (int i=0; i<LEN_USERDEF; ++i) {
    buffer[i] = complex_function(buffer[i], i + 17);
  }

  if (strcmp(buffer, password)) {
    printf("Try again.\n");
  } else {
    printf("Good Job.\n");
  }
}
