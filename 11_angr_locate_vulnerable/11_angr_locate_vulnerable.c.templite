${
import random, os
random.seed(os.urandom(16))

def generate_str_int():
  userdef_charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  result = 0
  for i, c in enumerate([random.choice(userdef_charset) for _ in xrange(4)]):
    result |= ord(c) << (i * 8)
  return result

def expanded_switch_statement(variable, miss_statement, hit_statement, samples):
  target = random.choice(samples)

  write('switch (%s) {' % (variable,))
  for sample in samples:
    write('case %d: %s; break;' % (sample, hit_statement if sample == target else miss_statement))
  write('default: %s; break; }' % (miss_statement,))
}$

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <signal.h>

char msg[] = "${ description }$";
char strcpy_buffer[8 + 4];

void print_msg() {
  printf("%s", msg);
}

void segv_handler(int sig) {
  printf("Good Job.\n");
  exit(0);
}

int main(int argc, char* argv[]) {
  char padding0[${ write(random.randint(0, 256)) }$];
  char user_buffer[33];
  char padding1[${ write(random.randint(0, 256)) }$];
  char program_buffer[33];
  char padding2[${ write(random.randint(0, 256)) }$];
  uint32_t key;

  signal(SIGSEGV, segv_handler);

  print_msg();

  memset(program_buffer, 0, 33);
  memset(user_buffer, 0, 33);
  memset(strcpy_buffer, 0, 17);
  *((char**) &strcpy_buffer[8]) = "Try again.\n";

  printf("Enter the password: ");
  scanf("%u %32s", &key, user_buffer);

  ${
  hit_statement = """
  strcpy(strcpy_buffer, user_buffer);
  strncpy(program_buffer, user_buffer, 32);
  """
  miss_statement = """
  strcpy(strcpy_buffer, program_buffer);
  strncpy(program_buffer, user_buffer, 32);
  """
  expanded_switch_statement('key', miss_statement, hit_statement, random.sample(xrange(2**31), random.randint(16, 100)))
  }$

  printf("%s", *((char**) &strcpy_buffer[8]));
  return 0;
}
