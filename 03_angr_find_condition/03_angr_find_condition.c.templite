${
import random, os
random.seed(os.urandom(8))

userdef_charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
userdef = ''.join(random.choice(userdef_charset) for _ in range(8))

def generate_true_statement(variable, value):
  random_int = random.randint(0, 0xFFFFFFFF)
  value_xor_int = value ^ random_int
  return '(!(' + variable + ' ^ ' + str(random_int) + ' ^ ' + str(value_xor_int) + '))'

def recursive_if_else(variable, value, depth):
  if depth == 0:
    write('if (strcmp(buffer, password)) { printf(\"Try again.\\n\"); } else { printf(\"Success.\\n\"); }')
  else:
    if_true = random.choice([True, False])
    if (if_true):
      write('if (' + generate_true_statement(variable, value) + ') {')
      recursive_if_else(variable, value, depth - 1)
      write('} else {')
      recursive_if_else(variable, value, depth - 1)
      write('}')
    else:
      write('if (!' + generate_true_statement(variable, value) + ') {')
      recursive_if_else(variable, value, depth - 1)
      write('} else {')
      recursive_if_else(variable, value, depth - 1)
      write('}')
}$

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ptrace.h>

#define USERDEF "${ userdef }$"
#define LEN_USERDEF ${ write(len(userdef)) }$

char msg[] = "${ description }$";

void print_msg() {
  printf("%s", msg);
}

int main(int argc, char* argv[]) {
  char buffer[20];
  char password[20];
  unsigned int x = 0xDEADBEEF;

  print_msg();

  for (int i=0; i < 20; ++i) {
    password[i] = 0;
  }

  strncpy(password, USERDEF, LEN_USERDEF);

  password[0] ^= password[1];
  password[1] ^= password[0];
  password[0] ^= password[1];

  printf("Enter the password: ");
  scanf("%8s", buffer);
  
  ${ recursive_if_else('x', 0xDEADBEEF, 8) }$
}

void detectTrace(void) __attribute__((constructor));
void detectTrace(void) {
    if (ptrace(PTRACE_TRACEME, 0, 1, 0) < 0) {
        exit(1);
    };
};
